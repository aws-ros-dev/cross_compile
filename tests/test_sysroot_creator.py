"""Tests for the `create_cc_sysroot.py` script.

PyTest fixtures are used to maintain consistency across tests.
"""

from glob import glob
import os
from pathlib import Path
import pytest
import shutil
import docker

from sysroot_creator.scripts.create_cc_sysroot import setup_cc_root_dir, \
    setup_sysroot_dir, get_workspace_image_tag, build_workspace_sysroot_image, \
    export_workspace_sysroot_image, write_cc_build_setup_file, \
    write_cc_system_setup_script


@pytest.fixture
def platform_config():
    from sysroot_creator.scripts.create_cc_sysroot import Platform
    return Platform(arch='aarch64', os='ubuntu', distro='dashing', rmw='fastrtps')


@pytest.fixture
def docker_config():
    from sysroot_creator.scripts.create_cc_sysroot import DockerConfig
    # TODO: Change base image to dockerhub repo image once we have access.
    return DockerConfig(
        base_image='035662560449.dkr.ecr.us-east-2.amazonaws.com/cc-tool:'
                   'aarch64-bionic-dashing-fastrtps-prebuilt',
        network_mode='host', nocache=False)


def teardown_function(function):
    """Cleanup folders generated by tests."""
    curr_directory = os.path.abspath(__file__)
    all_directories = glob(curr_directory + '*/') + glob(curr_directory + '*./')
    for directory in all_directories:
        shutil.rmtree(directory)


def test_setup_cc_root_dir(request, platform_config):
    """Check the workspace directory exists and that a COLCON_IGNORE was generated."""
    cc_root = setup_cc_root_dir(platform_config)
    colcon_ignore = cc_root / 'COLCON_IGNORE'
    assert isinstance(cc_root, Path)
    assert cc_root.exists() is True
    assert colcon_ignore.exists() is True


def test_setup_cc_root_dir_bad_input(request):
    """Make sure errors are raised on bad input."""
    with pytest.raises(TypeError):
        setup_cc_root_dir(None)


def test_setup_sysroot_dir(request, platform_config):
    """Make sure the sysroot directory exists."""
    cc_root = Path.cwd() / str(platform_config)
    sysroot_dir = setup_sysroot_dir(cc_root, True)
    assert isinstance(sysroot_dir, Path)
    assert sysroot_dir.exists() is True


def test_setup_sysroot_dir_bad_input(request):
    """Make sure errors are raised on bad input."""
    with pytest.raises(TypeError):
        setup_sysroot_dir(None, True)


def test_get_workspace_image_tag(request, platform_config):
    """Make sure the image tag is created correctly."""
    image_tag = get_workspace_image_tag(platform_config)
    test_tag = "{}/{}:latest".format(os.getenv('USER'), platform_config)
    assert isinstance(image_tag, str)
    assert image_tag == test_tag


def test_build_workspace_sysroot_image(request, platform_config, docker_config):
    """Build the Docker image and check that the Docker API is able to get the image."""
    image_tag = "{}/{}:latest".format(os.getenv('USER'), platform_config)
    build_workspace_sysroot_image(platform=platform_config,
                                  docker_args=docker_config,
                                  image_tag=image_tag)
    try:
        docker_client = docker.from_env()
        docker_client.images.get(image_tag)
    except docker.errors.ImageNotFound:
        pytest.fail('Image tag not found in Docker.')
    except docker.errors.APIError:
        pytest.fail('Unable to fetch image from Docker. Maybe the build didn\'t '
                    'complete succesfully?')


def test_build_workspace_sysroot_image_bad_input(request, platform_config, docker_config):
    """Make sure errors are raised on bad input."""
    image_tag = "{}/{}:latest".format(os.getenv('USER'), platform_config)
    with pytest.raises(TypeError):
        build_workspace_sysroot_image(platform=True,
                                      docker_args=docker_config,
                                      image_tag=None)
    with pytest.raises(TypeError):
        build_workspace_sysroot_image(platform=platform_config,
                                      docker_args=False,
                                      image_tag=False)
    with pytest.raises(TypeError):
        build_workspace_sysroot_image(platform=None,
                                      docker_args=docker_config,
                                      image_tag=image_tag)


def test_export_workspace_sysroot_image(request, platform_config, docker_config):
    """Checks if directories extracted from tar exist."""
    image_tag = "{}/{}:latest".format(os.getenv('USER'), platform_config)
    sysroot_dir = Path.cwd() / str(platform_config) / 'sysroot'
    build_workspace_sysroot_image(platform=platform_config,
                                  docker_args=docker_config,
                                  image_tag=image_tag)
    export_workspace_sysroot_image(image_tag, sysroot_dir)
    relevant_dirs = ['lib', 'usr', 'etc', 'opt', 'root_path']
    for dir in relevant_dirs:
        sysroot_relevent_dir = sysroot_dir / dir
        assert sysroot_relevent_dir.exists() is True


def test_write_cc_build_setup_file(request, platform_config):
    """Check if the build setup file was written to directory."""
    cc_root_dir = Path.cwd() / str(platform_config)
    build_setup_file_path = write_cc_build_setup_file(platform_config, cc_root_dir)
    assert isinstance(build_setup_file_path, Path)
    assert build_setup_file_path.exists() is True


def test_write_cc_system_setup_script(request, platform_config):
    """Check if the system setup file was written to directory."""
    cc_root_dir = Path.cwd() / str(platform_config)
    system_setup_script_path = write_cc_system_setup_script(cc_root_dir, platform_config)
    assert isinstance(system_setup_script_path, Path)
    assert system_setup_script_path.exists() is True
