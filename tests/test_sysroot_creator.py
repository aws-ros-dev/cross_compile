# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# Tests for the `create_cc_sysroot.py` script.

import os
import shutil
from glob import glob
from pathlib import Path
from types import SimpleNamespace
from typing import Dict

import docker
import pytest

from sysroot_creator.scripts.create_cc_sysroot import \
    build_workspace_sysroot_image, export_workspace_sysroot_image, \
    get_workspace_image_tag, setup_cc_root_dir, setup_sysroot_dir, \
    write_cc_build_setup_file, write_cc_system_setup_script
from sysroot_creator.scripts.create_cc_sysroot import DockerConfig
from sysroot_creator.scripts.create_cc_sysroot import Platform


def _default_args() -> SimpleNamespace:
    # TODO: Change base image to dockerhub repo image once we have access.

    args: SimpleNamespace = SimpleNamespace()
    args.arch = 'aarch64'
    args.os = 'ubuntu'
    args.distro = 'dashing'
    args.rmw = 'fastrtps'
    args.sysroot_base_image = '035662560449.dkr.ecr.us-east-2.amazonaws.com/' \
                              'cc-tool:' \
                              'aarch64-bionic-dashing-fastrtps-prebuilt'
    args.docker_network_mode = 'host'
    args.sysroot_nocache = 'False'

    return args


@pytest.fixture
def platform_config() -> Platform:
    return Platform(_default_args())


@pytest.fixture
def docker_config() -> DockerConfig:
    return DockerConfig(_default_args())


def teardown_function(function):
    """Cleanup folders generated by tests."""
    curr_directory = os.path.abspath(__file__)
    all_directories = \
        glob(curr_directory + '*/') + glob(curr_directory + '*./')
    for directory in all_directories:
        shutil.rmtree(directory)


def test_setup_cc_root_dir(platform_config):
    """
    Check the workspace directory exists and that a COLCON_IGNORE was
    generated.
    """
    cc_root = setup_cc_root_dir(platform_config)
    colcon_ignore = cc_root / 'COLCON_IGNORE'
    assert isinstance(cc_root, Path)
    assert cc_root.exists() is True
    assert colcon_ignore.exists() is True


def test_setup_cc_root_dir_bad_input(request):
    """Make sure errors are raised on bad input."""
    with pytest.raises(TypeError):
        setup_cc_root_dir(None)


def test_setup_sysroot_dir(platform_config):
    """Make sure the sysroot directory exists."""
    cc_root = Path.cwd() / platform_config.__str__
    sysroot_dir = setup_sysroot_dir(cc_root, True)
    assert isinstance(sysroot_dir, Path)
    assert sysroot_dir.exists() is True


def test_setup_sysroot_dir_bad_input():
    """Make sure errors are raised on bad input."""
    with pytest.raises(TypeError):
        setup_sysroot_dir(None, True)


def test_get_workspace_image_tag(platform_config):
    """Make sure the image tag is created correctly."""
    image_tag = get_workspace_image_tag(platform_config)
    test_tag = '{}/{}:latest'.format(
        os.getenv('USER'), platform_config.__str__)
    assert isinstance(image_tag, str)
    assert image_tag == test_tag


def test_build_workspace_sysroot_image(platform_config, docker_config):
    """Build the Docker image and check that the Docker API is able to get
    the image"""
    image_tag = '{}/{}:latest'.format(
        os.getenv('USER'), platform_config.__str__)
    build_workspace_sysroot_image(platform=platform_config,
                                  docker_args=docker_config,
                                  image_tag=image_tag)
    try:
        docker_client = docker.from_env()
        docker_client.images.get(image_tag)
    except docker.errors.ImageNotFound:
        pytest.fail('Image tag not found in Docker.')
    except docker.errors.APIError:
        pytest.fail('Unable to fetch image from Docker. '
                    "Maybe the build didn't complete successfully?")


def test_build_workspace_sysroot_image_bad_input(
        request, platform_config, docker_config):
    """Make sure errors are raised on bad input."""
    image_tag = '{}/{}:latest'.format(
        os.getenv('USER'), platform_config.__str__)
    with pytest.raises(TypeError):
        build_workspace_sysroot_image(platform=True,
                                      docker_args=docker_config,
                                      image_tag=None)
    with pytest.raises(TypeError):
        build_workspace_sysroot_image(platform=platform_config,
                                      docker_args=False,
                                      image_tag=False)
    with pytest.raises(TypeError):
        build_workspace_sysroot_image(platform=None,
                                      docker_args=docker_config,
                                      image_tag=image_tag)


def test_export_workspace_sysroot_image(platform_config, docker_config):
    """Checks if directories extracted from tar exist."""
    image_tag = '{}/{}:latest'.format(
        os.getenv('USER'), platform_config.__str__)
    sysroot_dir = Path.cwd() / platform_config.__str__ / 'sysroot'
    build_workspace_sysroot_image(platform=platform_config,
                                  docker_args=docker_config,
                                  image_tag=image_tag)
    export_workspace_sysroot_image(image_tag, sysroot_dir)
    relevant_dirs = ['lib', 'usr', 'etc', 'opt', 'root_path']
    for directory in relevant_dirs:
        sysroot_relevant_dir = sysroot_dir / directory
        assert sysroot_relevant_dir.exists() is True


def test_write_cc_build_setup_file(platform_config):
    """Check if the build setup file was written to directory."""
    cc_root_dir = Path.cwd() / platform_config.__str__
    build_setup_file_path = write_cc_build_setup_file(
        cc_root_dir, platform_config)
    assert isinstance(build_setup_file_path, Path)
    assert build_setup_file_path.exists() is True


def test_write_cc_system_setup_script(request, platform_config):
    """Check if the system setup file was written to directory."""
    cc_root_dir = Path.cwd() / platform_config.__str__
    system_setup_script_path = write_cc_system_setup_script(
        cc_root_dir, platform_config)
    assert isinstance(system_setup_script_path, Path)
    assert system_setup_script_path.exists() is True
